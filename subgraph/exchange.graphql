type PancakeFactory @entity {
  id: ID!

  "Total of pairs"
  totalPairs: BigInt! @parallel(step: 1, type: SUM)

  "Total of transactions"
  totalTransactions: BigInt! @parallel(step: 4, type: SUM)

  # total volume
  totalVolumeUSD: BigDecimal! @parallel(step: 4, type: SUM)
  totalVolumeBNB: BigDecimal! @parallel(step: 4, type: SUM)

  # untracked values - less confident USD scores
  untrackedVolumeUSD: BigDecimal! @parallel(step: 4, type: SUM)

  # total liquidity
  totalLiquidityUSD: BigDecimal! @parallel(step: 4)
  totalLiquidityBNB: BigDecimal! @parallel(step: 4)
}

type Bundle @entity {
  id: ID!

  "BNB price, in USD"
  bnbPrice: BigDecimal! @parallel(step: 4)
}

type Token @entity {
  id: ID!

  "Name"
  name: String! @parallel(step: 1)
  "Symbol"
  symbol: String! @parallel(step: 1)
  "Decimals"
  decimals: BigInt! @parallel(step: 1)

  # token specific volume
  tradeVolume: BigDecimal!        @parallel(step: 4, type: SUM)
  tradeVolumeUSD: BigDecimal!     @parallel(step: 4, type: SUM) @sql(index: false)
  untrackedVolumeUSD: BigDecimal! @parallel(step: 4, type: SUM)

  # transactions across all pairs
  totalTransactions: BigInt!  @parallel(step: 4, type: SUM)

  # liquidity across all pairs
  totalLiquidity: BigDecimal!  @parallel(step: 4, type: SUM)

  # derived prices
  derivedBNB: BigDecimal @parallel(step: 2)
  derivedUSD: BigDecimal @parallel(step: 2)

  # derived fields
  tokenDayData: [TokenDayData!]! @derivedFrom(field: "token")
  pairDayDataBase: [PairDayData!]! @derivedFrom(field: "token0")
  pairDayDataQuote: [PairDayData!]! @derivedFrom(field: "token1")
  pairBase: [Pair!]! @derivedFrom(field: "token0")
  pairQuote: [Pair!]! @derivedFrom(field: "token1")
}

type Pair @entity {
  id: ID!

  name: String! @parallel(step: 1)

  # mirrored from the smart contract
  token0: Token! @parallel(step: 1)
  token1: Token! @parallel(step: 1)
  reserve0: BigDecimal!  @parallel(step: 2)
  reserve1: BigDecimal!  @parallel(step: 2)
  totalSupply: BigDecimal! @parallel(step: 4, type: SUM)

  # derived liquidity
  reserveBNB: BigDecimal!  @parallel(step: 3)
  reserveUSD: BigDecimal!  @parallel(step: 3) @sql(index: false)
  trackedReserveBNB: BigDecimal! @sql(index: false) # used for separating per pair reserves and global
  # Price in terms of the asset pair
  token0Price: BigDecimal! @parallel(step: 2)
  token1Price: BigDecimal! @parallel(step: 2)

  # lifetime volume stats
  volumeToken0: BigDecimal!  @parallel(step: 4, type: SUM)
  volumeToken1: BigDecimal! @parallel(step: 4, type: SUM)
  volumeUSD: BigDecimal! @parallel(step: 4, type: SUM) @sql(index: false)
  untrackedVolumeUSD: BigDecimal! @parallel(step: 4, type: SUM)
  totalTransactions: BigInt! @parallel(step: 4, type: SUM)

  block: BigInt! @parallel(step: 1)
  timestamp: BigInt! @parallel(step: 1)

  # derived fields
  pairHourData: [PairHourData!]! @derivedFrom(field: "pair")
  mints: [Mint!]! @derivedFrom(field: "pair")
  burns: [Burn!]! @derivedFrom(field: "pair")
  swaps: [Swap!]! @derivedFrom(field: "pair")
}

type Transaction @entity @cache(skip_db_lookup: true) {
  id: ID!

  block: BigInt! @parallel(step: 4)
  timestamp: BigInt! @parallel(step: 4)
  # This is not the reverse of Mint.transaction; it is only used to
  # track incomplete mints (similar for burns and swaps)
  mints: [Mint]!
  burns: [Burn]!
  swaps: [Swap]!
}

type Mint @entity {
  # transaction hash + "-" + index in mints Transaction array
  id: ID!
  transaction: Transaction! @parallel(step: 4)
  timestamp: BigInt!  @parallel(step: 4) # need this to pull recent txns for specific token or pair
  pair: Pair! @parallel(step: 4)
  token0: Token! @parallel(step: 4)
  token1: Token! @parallel(step: 4)

  # populated from the primary Transfer event
  to: String! @parallel(step: 4)
  liquidity: BigDecimal! @parallel(step: 4)

  # the EOA that initiated the txn
  origin: String @parallel(step: 4)

  # populated from the Mint event
  sender: String @parallel(step: 4)
  amount0: BigDecimal @parallel(step: 4)
  amount1: BigDecimal @parallel(step: 4)
  logIndex: BigInt @parallel(step: 4)
  # derived amount based on available prices of tokens
  amountUSD: BigDecimal @parallel(step: 4)

  # optional fee fields, if a Transfer event is fired in _mintFee
  feeTo: String @parallel(step: 4)
  feeLiquidity: BigDecimal @parallel(step: 4)
}

type Burn @entity {
  # transaction hash + "-" + index in mints Transaction array
  id: ID!
  transaction: Transaction! @parallel(step: 4)
  timestamp: BigInt! @parallel(step: 4) # need this to pull recent txns for specific token or pair
  pair: Pair! @parallel(step: 4)
  token0: Token! @parallel(step: 4)
  token1: Token! @parallel(step: 4)

  # populated from the primary Transfer event
  liquidity: BigDecimal! @parallel(step: 4)

  # populated from the Burn event
  sender: String @parallel(step: 4)
  amount0: BigDecimal @parallel(step: 4)
  amount1: BigDecimal @parallel(step: 4)
  to: String @parallel(step: 4)
  logIndex: BigInt @parallel(step: 4)
  # derived amount based on available prices of tokens
  amountUSD: BigDecimal @parallel(step: 4)

  # mark uncomplete in BNB case
  needsComplete: Boolean! @parallel(step: 4)

  # optional fee fields, if a Transfer event is fired in _mintFee
  feeTo: String @parallel(step: 4)
  feeLiquidity: BigDecimal @parallel(step: 4)
}

type Swap @entity {
  # transaction hash + "-" + index in swaps Transaction array
  id: ID!
  transaction: Transaction!  @parallel(step: 4)
  timestamp: BigInt!  @parallel(step: 4) # need this to pull recent txns for specific token or pair
  pair: Pair!  @parallel(step: 4)
  token0: Token! @parallel(step: 4)
  token1: Token! @parallel(step: 4)

  # populated from the Swap event
  sender: String! @parallel(step: 4)
  from: String! @parallel(step: 4) # the EOA that initiated the txn
  amount0In: BigDecimal! @parallel(step: 4)
  amount1In: BigDecimal! @parallel(step: 4)
  amount0Out: BigDecimal! @parallel(step: 4)
  amount1Out: BigDecimal! @parallel(step: 4)
  to: String! @parallel(step: 4)
  logIndex: BigInt @parallel(step: 4)

  # derived info
  amountUSD: BigDecimal! @parallel(step: 4)
}

type PancakeDayData @entity {
  id: ID! # timestamp rounded to current day by dividing by 86400

  date: Int!  @parallel(step: 4)

  dailyVolumeBNB: BigDecimal! @parallel(step: 4, type: SUM)
  dailyVolumeUSD: BigDecimal! @parallel(step: 4, type: SUM)
  dailyVolumeUntracked: BigDecimal! @parallel(step: 4, type: SUM)

  totalVolumeBNB: BigDecimal! @parallel(step: 4, type: SUM)
  totalLiquidityBNB: BigDecimal! @parallel(step: 4)
  totalVolumeUSD: BigDecimal!  @parallel(step: 4, type: SUM)# Accumulate at each trade, not just calculated off whatever totalVolume is. making it more accurate as it is a live conversion
  totalLiquidityUSD: BigDecimal! @parallel(step: 4)

  totalTransactions: BigInt! @parallel(step: 4)
}

type PairHourData @entity {
  id: ID!

  hourStartUnix: Int! @parallel(step: 4) # unix timestamp for start of hour
  pair: Pair! @parallel(step: 4)

  # reserves
  reserve0: BigDecimal! @parallel(step: 4)
  reserve1: BigDecimal! @parallel(step: 4)

  # total supply for LP historical returns
  totalSupply: BigDecimal! @parallel(step: 4, type: SUM)

  # derived liquidity
  reserveUSD: BigDecimal!

  # volume stats
  hourlyVolumeToken0: BigDecimal!  @parallel(step: 4, type: SUM)
  hourlyVolumeToken1: BigDecimal!  @parallel(step: 4, type: SUM)
  hourlyVolumeUSD: BigDecimal!  @parallel(step: 4, type: SUM)
  hourlyTxns: BigInt!  @parallel(step: 4, type: SUM)
}

type PairDayData @entity {
  id: ID!

  date: Int! @parallel(step: 4)
  pairAddress: Pair! @parallel(step: 4)
  token0: Token! @parallel(step: 4)
  token1: Token! @parallel(step: 4)

  # reserves
  reserve0: BigDecimal! @parallel(step: 4)
  reserve1: BigDecimal! @parallel(step: 4)

  # total supply for LP historical returns
  totalSupply: BigDecimal! @parallel(step: 4, type: SUM)

  # derived liquidity
  reserveUSD: BigDecimal! @parallel(step: 4)

  # volume stats
  dailyVolumeToken0: BigDecimal! @parallel(step: 4, type: SUM)
  dailyVolumeToken1: BigDecimal! @parallel(step: 4, type: SUM)
  dailyVolumeUSD: BigDecimal! @parallel(step: 4, type: SUM)
  dailyTxns: BigInt! @parallel(step: 4, type: SUM)
}

type TokenDayData @entity {
  id: ID!

  date: Int! @parallel(step: 4)
  token: Token! @parallel(step: 4)

  # volume stats
  dailyVolumeToken: BigDecimal! @parallel(step: 4, type: SUM)
  dailyVolumeBNB: BigDecimal! @parallel(step: 4, type: SUM)
  dailyVolumeUSD: BigDecimal! @parallel(step: 4, type: SUM)
  dailyTxns: BigInt! @parallel(step: 4, type: SUM)

  # liquidity stats
  totalLiquidityToken: BigDecimal! @parallel(step: 4)
  totalLiquidityBNB: BigDecimal! @parallel(step: 4)
  totalLiquidityUSD: BigDecimal! @parallel(step: 4)

  # price stats
  priceUSD: BigDecimal! @parallel(step: 4)
}
